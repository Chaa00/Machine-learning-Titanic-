# -*- coding: utf-8 -*-
"""
Created on Fri Jun 19 17:10:28 2020

@author: HP-PC
"""

import pandas as pd
import numpy as np
import seaborn as sb 
import matplotlib.pyplot as plt 

#loading Data
Data=pd.read_csv(r"C:\Users\HP-PC\Desktop\train.csv",sep=',')
test=pd.read_csv(r"C:\Users\HP-PC\Desktop\test.csv",sep=',')



#combien de données sont manquantes?
total = Data.isnull().sum().sort_values(ascending=False)
percent_1 = Data.isnull().sum()/Data.isnull().count()*100
percent_2 = (round(percent_1, 1)).sort_values(ascending=False)
missing_data = pd.concat([total, percent_2], axis=1, keys=['Total', '%'])
missing_data.head(5)

test.head()
test.shape
test.info()
test.isnull().sum()

all_data = [Data, test]


print(Data['Age'])
print(test['Age'])
Data["Age"].isnull().sum()         #177 NaN 
test["Age"].isnull().sum()         #86 NaN
#missing age 
#un choix pour remplir les valeurs NaN de Age 
for dataset in all_data:
    mean = Data["Age"].mean() #jai pris la moyenne des age dans Data 
    std = test["Age"].std()#jai pris l ecart type des ages de Test
    is_null = dataset["Age"].isnull().sum()
    print(is_null) #86 
    # calculer  des valeurs aleatoires  entre la moyenne, l ecart type et is null 
    rand_age = np.random.randint(mean - std, mean + std, size = is_null)
    # fill NaN values in Age column with random values generated
    age_slice = dataset["Age"].copy()
    age_slice[np.isnan(age_slice)] = rand_age 
    dataset["Age"] = age_slice
    dataset["Age"] = Data["Age"].astype(int)
    dataset["Age"].isnull().sum()

all_data= [Data, test]
dataset["Fare"].isnull().sum()
for dataset in all_data:
    dataset['Fare'] = dataset['Fare'].fillna(0)
    dataset['Fare'] = dataset['Fare'].astype(int)
    
    
    

#missing embarked

Data['Embarked'].isnull().sum()
test['Embarked'].isnull().sum()
print(Data[Data.Embarked.isnull()])
#They are two females with the same ticket number and the same cabin 
# Idea 1: Are there other passengers  in the same cabin, or the same tickets which embarked ? 
Data[(Data['Embarked'].notnull()) & ((Data['Ticket'] == '113572') | (Data['Cabin'] == 'B28'))]

#Idea 2: Where did most women embarked 
EmbarkedFemale = Data[(Data['Embarked'].notnull()) & ((Data['Sex'] == 'female'))]

EmbarkedFemale['Embarked'].hist() #S is the most used by Females 
Data['Embarked'].fillna('S',inplace=True) #We will fill in with the value S 
Data['Embarked'].isnull().sum()



#let's clear the dataset:


all_data = [Data, test]

for dataset in all_data:
    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0
    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1
    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2
    dataset.loc[(dataset['Fare'] > 31) & (dataset['Fare'] <= 99), 'Fare']   = 3
    dataset.loc[(dataset['Fare'] > 99) & (dataset['Fare'] <= 250), 'Fare']   = 4
    dataset.loc[ dataset['Fare'] > 250, 'Fare'] = 5
    dataset['Fare'] = dataset['Fare'].astype(int)

genders = {"male": 0, "female": 1}

for dataset in all_data:
    dataset['Sex'] = dataset['Sex'].map(genders)



ports = {"S": 0, "C": 1, "Q": 2}

for dataset in all_data:
    dataset['Embarked'] = dataset['Embarked'].map(ports)
Data['Embarked'].value_counts()
#creation d'un nouveau descripteur Family size
for dataset in all_data:
    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1
print (Data[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean())



#creation d'un nouveau descripteur Title 
titles = {"Mr": 1, "Miss": 2, "Mrs": 3, "Master": 4, "Rare": 5}

for dataset in all_data:
    # extract titles
    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\.', expand=False)
    # replace titles with a more common title or as Rare
    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr',\
                                            'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')
    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')
    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')
    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')
    # convert titles into numbers
    dataset['Title'] = dataset['Title'].map(titles)
    # filling NaN with 0, to get safe
    dataset['Title'] = dataset['Title'].fillna(0)
print(pd.crosstab(Data['Title'], Data['Sex']))
print(Data[['Title','Survived']].groupby(['Title'], as_index = False).mean())
print(dataset['Title'])
Data= Data.drop(['Name'], axis=1)
test = test.drop(['Name'], axis=1)


#nettoyer la data 
all_data = [Data, test]
    
for dataset in all_data:
    dataset['Age'] = dataset['Age'].astype(int)
    dataset.loc[ dataset['Age'] <= 11, 'Age'] = 0
    dataset.loc[(dataset['Age'] > 11) & (dataset['Age'] <= 18), 'Age'] = 1
    dataset.loc[(dataset['Age'] > 18) & (dataset['Age'] <= 22), 'Age'] = 2
    dataset.loc[(dataset['Age'] > 22) & (dataset['Age'] <= 27), 'Age'] = 3
    dataset.loc[(dataset['Age'] > 27) & (dataset['Age'] <= 33), 'Age'] = 4
    dataset.loc[(dataset['Age'] > 33) & (dataset['Age'] <= 40), 'Age'] = 5
    dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 66), 'Age'] = 6
    dataset.loc[ dataset['Age'] > 66, 'Age'] = 7

# let's see how it's distributed 

Data['Age'].value_counts()

print(Data['Age'])



Data = Data.drop(['PassengerId'], axis=1)
#dealing with missing Data 
# we can now drop the cabin feature
Data = Data.drop(['Cabin'], axis=1)
test = test.drop(['Cabin'], axis=1)
Data['Ticket'].describe()
Data = Data.drop(['Ticket'], axis=1)
test = test.drop(['Ticket'], axis=1)

print(Data['Age'])
print(Data.head(10))


#Notre base de donnée est prete 

